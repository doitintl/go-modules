// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	worker "github.com/doitintl/go-modules/worker"
	mock "github.com/stretchr/testify/mock"
)

// FnWorkerPool is an autogenerated mock type for the FnWorkerPool type
type FnWorkerPool struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: task
func (_m *FnWorkerPool) AddTask(task worker.TaskFunc) {
	_m.Called(task)
}

// AddWorkers provides a mock function with given fields: count
func (_m *FnWorkerPool) AddWorkers(count int) {
	_m.Called(count)
}

// RemoveWorkers provides a mock function with given fields: count
func (_m *FnWorkerPool) RemoveWorkers(count int) {
	_m.Called(count)
}

// Stop provides a mock function with given fields:
func (_m *FnWorkerPool) Stop() {
	_m.Called()
}

// TaskChannel provides a mock function with given fields:
func (_m *FnWorkerPool) TaskChannel() chan worker.TaskFunc {
	ret := _m.Called()

	var r0 chan worker.TaskFunc
	if rf, ok := ret.Get(0).(func() chan worker.TaskFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan worker.TaskFunc)
		}
	}

	return r0
}

// WorkersCount provides a mock function with given fields:
func (_m *FnWorkerPool) WorkersCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type NewFnWorkerPoolT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFnWorkerPool creates a new instance of FnWorkerPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFnWorkerPool(t NewFnWorkerPoolT) *FnWorkerPool {
	mock := &FnWorkerPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
